import asyncio
import aiohttp
import telebot
from datetime import datetime
from envparse import Env
from telebot import types
from telebot.async_telebot import AsyncTeleBot

from user_info import User
from markups import MarkupCreator, MarkupSetter
from exchange_getting import ExchangeGetter
from valid import Validator
from calc import Calculator
from coroutine_creating import CoroutineCreator
from task_setting import TaskSetter
from ask_operations import Ask
from cancel_operations import Cancel
from automatic_recovery import Restorer
from massage_handler_operations import MessageHandlerOperator
from telegram_client import TelegramClient
from database_operations import DataBaseClient, UserActioner


user = User()
user_actioner = UserActioner(DataBaseClient('users.db'))
validator = Validator()
calculator = Calculator()
markup_creator = MarkupCreator()
markup_setter = MarkupSetter()
exchange_getter = ExchangeGetter()
cancel = Cancel(user)
ask = Ask(user)
task_setter = TaskSetter(user)
coroutine_creator = CoroutineCreator(user, task_setter, markup_creator, exchange_getter)
msg_handler = MessageHandlerOperator(user, exchange_getter, markup_setter, markup_creator,
                                     validator, calculator, coroutine_creator, task_setter)
task_setter.cor = coroutine_creator


env = Env()
TOKEN = env.str('TOKEN')
ADMIN_CHAT_ID = env.int('ADMIN_CHAT_ID')


class MyBot(AsyncTeleBot):
    def __init__(self, telegram_client: TelegramClient, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.telegram_client = telegram_client
        self.user_actioner = user_actioner

    def setup_resources(self):
        self.user_actioner.setup()

    def create_table(self):
        self.user_actioner.create_table()

    def shutdown(self):
        self.user_actioner.shutdown()

    def update_time_interval(self, user_id, time_interval):
        self.user_actioner.update_time_interval(user_id, time_interval)

    def update_delta(self, user_id, delta):
        self.user_actioner.update_delta(user_id, delta)

    def update_everyday_time(self, user_id, everyday_time):
        self.user_actioner.update_everyday_time(user_id, everyday_time)

    def select_all_users_info(self):
        return self.user_actioner.select_all_users_info()


tg_client = TelegramClient(token=TOKEN, base_url='https://api.telegram.org')
bot = MyBot(token=TOKEN, telegram_client=tg_client)
restorer = Restorer(bot, user, task_setter, calculator, coroutine_creator)


async def func_restore():
    await restorer.restore_state()


async def func_polling():
    await bot.polling()


async def restore_and_polling():
    task_restorer = asyncio.create_task(func_restore())
    task_polling = asyncio.create_task(func_polling())
    await task_restorer
    await task_polling


@bot.message_handler(commands=['start'])
async def start_command(message):
    """
    –í—Å—è–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–∂–∞–≤—à–∏–π /start, –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É
    """
    user_id = message.chat.id
    username = message.from_user.username
    user_exists = bot.user_actioner.get_user(user_id)
    if not user_exists:
        bot.user_actioner.create_user(user_id, username, None, None, None)
        bot.telegram_client.post(method='sendMessage', params={'text': f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}, id {user_id}',
                                                               'chat_id': ADMIN_CHAT_ID})

    await cancel.cancel_all_settings(bot, message, from_start=True)

    user.set_default_info(user_id)
    default_markup = markup_creator.create_default_markup()
    text = 'Dollar Assistant BY - –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞.' \
                    '\n' \
                    '\n<b>–ö–æ–º–∞–Ω–¥—ã</b>' \
                    '\n/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫' \
                    '\n/help - –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞' \
                    '\n/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'
    await bot.send_message(user_id, text, reply_markup=default_markup, parse_mode='HTML')


@bot.message_handler(commands=['help'])
async def help_command(message):
    text = 'Dollar Assistant BY - —ç—Ç–æ –±–æ—Ç –≤ Telegram, –ø–æ–∑–æ–ª—è—é—â–∏–π –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ ' \
           '–¥–æ–ª–ª–∞—Ä–∞ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é.\n ' \
           '\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —Å–∏—é–º–∏–Ω—É—Ç–Ω–æ —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ' \
           '"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞". –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Ç–æ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", –≤—ã ' \
           '–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–¥–æ–±–Ω–æ–π –¥–ª—è –≤–∞—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.' \
           '\n' \
           '\n<b>–í–∏–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>' \
           '\n' \
           '\n‚è± –í—Ä–µ–º–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–∏—Ö–æ–¥—è—Ç –≤–∞–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∞–º–∏ —á–∞—Å—Ç–æ—Ç–æ–π ' \
           '(20 –º–∏–Ω—É—Ç, —á–∞—Å, –¥–µ–Ω—å –∏ —Ç.–¥.).' \
           '\n' \
           '\nüí≤ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞. –ë–æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∏ –≤ —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—ë –Ω–∞ ' \
           '–∫–∞–∫—É—é-–ª–∏–±–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–∞–º –æ–± —ç—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ó–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–π –≤–µ–ª–∏—á–∏–Ω—ã –≤—ã ' \
           '–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ —Å–∞–º–∏ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ —á–∞—Å—Ç–æ—Ç—É –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–∏–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.' \
           '\n' \
           '\n<b>–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã</b>' \
           '\n' \
           '\nüì© –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Ç–∞–∫ –∏ –æ–±–∞ —Å—Ä–∞–∑—É.' \
           '\n' \
           '\nüè¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –±–µ—Ä—ë—Ç—Å—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–õ—É—á—à–∏–µ –∫—É—Ä—Å—ã" –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ myfin.by. ' \
           '–ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-–ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–∞–º —ç—Ç–æ—Ç —Å–∞–π—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –±–æ—Ç –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π ' \
           '—Å–∞–π—Ç –ë–µ–ª–∞—Ä—É—Å–±–∞–Ω–∫–∞.' \
           '\n' \
           '\nüí∞ –ü—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –≤–µ–ª–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–µ–¥—É—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ–ª–ª–∞—Ä–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.' \
           '\n' \
           '\nüåç –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ GMT+3 (–ú–æ—Å–∫–≤–∞). –≠—Ç–æ –≤–∞–∂–Ω–æ –∏–º–µ—Ç—å –≤ –≤–∏–¥—É –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö ' \
           '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, —Ç–æ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π ' \
           '—Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –æ—Ç–¥–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –≤–∞—Ä–∏–∞—Ü–∏—è–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' \
           '\n' \
           '\n<b>–ö–æ–º–∞–Ω–¥—ã</b>' \
           '\n/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫' \
           '\n/help - –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞' \
           '\n/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.'

    await bot.send_message(message.chat.id, text, parse_mode='HTML')


@bot.message_handler(commands=['info'])
async def help_command(message):
    await markup_setter.set_start_markup_to_set_reminders(bot=bot,
                                                          task_2=user.info[message.chat.id]['task_2_object'],
                                                          task_3=user.info[message.chat.id]['task_3_object'],
                                                          message=message,
                                                          time_interval=user.info[message.chat.id]['time_interval_str'],
                                                          delta=user.info[message.chat.id]['delta_str'],
                                                          for_info=True)


@bot.message_handler()
async def correct_input(message):

    if message.text.lower() in ('—Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ üíµ', '–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞', '–∫—É—Ä—Å', '–¥–æ–ª–ª–∞—Ä', '$', 'üíµ'):
        await msg_handler.processing_a_request_to_get_the_dollar_exchange(bot, message)

    elif message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî':
        await msg_handler.process_a_request_to_configure_notifications(bot, message)

    elif user.info[message.chat.id]['setting the time for notifications once a day']:
        await msg_handler.process_data_when_setting_one_day_notifications(bot, message)

    elif user.info[message.chat.id]['setting the time for notifications by own configuration']:
        await msg_handler.process_data_when_setting_notifications_with_own_interval(bot, message)

    elif user.info[message.chat.id]['setting own delta']:
        await msg_handler.process_data_when_setting_own_delta(bot, message)

    else:
        await msg_handler.process_any_other_message(bot, message)


@bot.callback_query_handler(func=lambda callback: callback)
async def callback_manager(callback):
    callback_dir = {
        '20 min': lambda: task_setter.set_a_task_for_time_reminders(bot, callback.message, 1200, '–∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç.'),
        '60 min': lambda: task_setter.set_a_task_for_time_reminders(bot, callback.message, 3600, '–∫–∞–∂–¥—ã–π —á–∞—Å.'),
        'once a day': lambda: ask.ask_about_time_for_everyday_reminders(bot, callback.message),
        'own config': lambda: ask.ask_about_a_convenient_time_interval(bot, callback.message),
        'cancel time': lambda: cancel.cancel_time_reminders(bot, callback.message),

        '0.001': lambda: task_setter.set_a_task_for_delta_reminders(bot, callback.message, 0.001),
        '0.01': lambda: task_setter.set_a_task_for_delta_reminders(bot, callback.message, 0.01),
        '0.05': lambda: task_setter.set_a_task_for_delta_reminders(bot, callback.message, 0.05),
        '0.1': lambda: task_setter.set_a_task_for_delta_reminders(bot, callback.message, 0.1),
        'own_delta': lambda: ask.ask_about_own_delta(bot, callback.message),
        'cancel delta': lambda: cancel.cancel_delta_reminders(bot, callback.message),

        'set time': lambda: markup_setter.set_markup_to_set_the_time(bot, callback.message),
        'set delta': lambda: markup_setter.set_delta(bot, callback.message),
        'cancel all settings': lambda: cancel.cancel_all_settings(bot, callback.message)
    }
    await callback_dir[callback.data]()


if __name__ == '__main__':
    while True:
        try:
            bot.setup_resources()
            bot.create_table()
            asyncio.run(restore_and_polling())

        except Exception as err:
            bot.telegram_client.post(method='sendMessage', params={'text': f'{datetime.now()}\n–û–®–ò–ë–ö–ê: '
                                                                           f'\n{err}',
                                                                   'chat_id': ADMIN_CHAT_ID})
            bot.shutdown()
