import asyncio
import aiohttp
import requests
import json
from datetime import datetime
from bs4 import BeautifulSoup


class ExchangeGetter:

    @staticmethod
    async def aiohttp_parsing():
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ –ú–∏–Ω—Ñ–∏–Ω–∞ –†–ë
        """
        URL = 'https://myfin.by/currency/usd'
        async with aiohttp.ClientSession() as session:
            async with session.get(URL) as resp:
                response = await resp.read()
                soup = BeautifulSoup(response, 'html.parser')
                convert = soup.findAll('span', {'class': 'accent'})
                return convert[0].text, convert[1].text

    @staticmethod
    def parsing():
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ –ú–∏–Ω—Ñ–∏–Ω–∞ –†–ë (–≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ)
        """
        URL = 'https://myfin.by/currency/usd'
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'
                                 ' Chrome/115.0.0.0 Safari/537.36'}
        full_page = requests.get(URL, headers)
        soup = BeautifulSoup(full_page.content, 'html.parser')
        convert = soup.findAll('span', {'class': 'accent'})
        return convert[0].text, convert[1].text

    @staticmethod
    def get_json():
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ—Ç-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç –ë–µ–ª–∞—Ä—É—Å–±–∞–Ω–∫–∞
        """
        URL = 'https://belarusbank.by/api/kursExchange'
        answer = requests.get(URL)
        exchange = json.loads(answer.text)[0]['USD_in'], json.loads(answer.text)[0]['USD_out']
        return exchange

    async def get_exchange(self, for_delta=False):
        if for_delta:
            try:
                result = await self.aiohttp_parsing()
                return result
            except:
                result = self.parsing()
                return result
        else:
            try:
                result = await self.aiohttp_parsing(), '–ø–æ –¥–∞–Ω–Ω—ã–º –ú–∏–Ω—Ñ–∏–Ω–∞ –†–ë'
            except:
                try:
                    result = self.parsing(), '–ø–æ –¥–∞–Ω–Ω—ã–º –ú–∏–Ω—Ñ–∏–Ω–∞ –†–ë'
                except:
                    result = self.get_json(), '–ø–æ –¥–∞–Ω–Ω—ã–º –ë–µ–ª–∞—Ä—É—Å–±–∞–Ω–∫–∞'

            return result

    async def set_exchange(self, bot, target_id, default_markup, change=None):
        """
        –í—ã–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        if change is None:
            result = await self.get_exchange()
            text = (f'üí∏ –í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {result[1]} –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:'
                                                f'\n–ø—Ä–æ–¥–∞–∂–∞: <b>{result[0][0]} BYN</b>'
                                                f'\n–ø–æ–∫—É–ø–∫–∞: <b>{result[0][1]} BYN</b>')
        else:
            result = await self.get_exchange(for_delta=True)
            if change > 0:
                event_characteristic = '–ø–æ–≤—ã—à–µ–Ω–∏–µ'
            else:
                event_characteristic = '–ø–æ–Ω–∏–∂–µ–Ω–∏–µ'

            text = (f'ü§ë –ü—Ä–æ–∏–∑–æ—à–ª–æ {event_characteristic} –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ (–ø–æ–∫—É–ø–∫–∞) –Ω–∞ {abs(change)} BYN. ' 
                   f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:' 
                   f'\n–ø—Ä–æ–¥–∞–∂–∞: <b>{result[0]} BYN</b>' 
                   f'\n–ø–æ–∫—É–ø–∫–∞: <b>{result[1]} BYN</b>')

        await bot.send_message(target_id, text, reply_markup=default_markup, parse_mode='HTML')



